unit Unit3;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Data.DB, Vcl.StdCtrls, Vcl.Grids,
  Vcl.DBGrids, JvExDBGrids, JvDBGrid, Vcl.ExtCtrls, JvExExtCtrls,
  JvExtComponent, JvCaptionPanel, Vcl.DBCtrls, Vcl.Mask, frxClass, frxDBSet;

type
  TForm3 = class(TForm)
    Panel1: TPanel;
    JvDBGrid1: TJvDBGrid;
    Button1: TButton;
    Button2: TButton;
    Button3: TButton;
    Button4: TButton;
    Label1: TLabel;
    Edit1: TEdit;
    JvCaptionPanel1: TJvCaptionPanel;
    Button5: TButton;
    Button6: TButton;
    Panel2: TPanel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    Label7: TLabel;
    Label8: TLabel;
    Label9: TLabel;
    Edit2: TEdit;
    Edit3: TEdit;
    ComboBox1: TComboBox;
    ComboBox2: TComboBox;
    ComboBox3: TComboBox;
    Edit4: TEdit;
    Edit5: TEdit;
    Edit6: TEdit;
    Label10: TLabel;
    JvCaptionPanel2: TJvCaptionPanel;
    Panel3: TPanel;
    Label11: TLabel;
    Label12: TLabel;
    Label13: TLabel;
    Label14: TLabel;
    Label15: TLabel;
    Label16: TLabel;
    Label17: TLabel;
    Label18: TLabel;
    Label19: TLabel;
    Button7: TButton;
    Button8: TButton;
    DBEdit1: TDBEdit;
    DBEdit2: TDBEdit;
    DBComboBox1: TDBComboBox;
    DBComboBox2: TDBComboBox;
    DBComboBox3: TDBComboBox;
    DBEdit3: TDBEdit;
    DBEdit4: TDBEdit;
    DBEdit5: TDBEdit;
    frxReport1: TfrxReport;
    frxDBDataset1: TfrxDBDataset;
    Button9: TButton;
    Edit7: TEdit;
    Label20: TLabel;
    procedure FormActivate(Sender: TObject);
    procedure Button5Click(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure Button6Click(Sender: TObject);
    procedure Button4Click(Sender: TObject);
    procedure JvDBGrid1TitleClick(Column: TColumn);
    procedure Button3Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Button8Click(Sender: TObject);
    procedure Button7Click(Sender: TObject);
    procedure Button9Click(Sender: TObject);
    procedure Edit6Exit(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form3: TForm3;

implementation

{$R *.dfm}

uses Unit2;

// Convierte números a letras de forma recursiva
function NumbersToLetters(Number: Double) : String;
const
  Digit: array[1..9] of String = (' Uno', 'Dos', 'Tres',
                                  'Cuatro', 'Cinco', 'Seis',
                                  'Siete', 'Ocho', 'Nueve');

  Numeral: array[11..19] of String = ('Once', 'Doce', 'Trece',
                                      'Catorce', 'Quince', 'Diez y Seis',
                                      'Diez y Siete', 'Diez y Ocho', 'Diez y Nueve');

  Tenths: array[1..9] of String = ('Diez', 'Veinte', 'Trienta',
                                   'Cuarenta', 'Cincuenta', 'Sesenta',
                                   'Setenta', 'Ochenta', 'Noventa');

  Hundreds : array[1..9] of String = ('Cien ', 'Docientos ', 'Trecientos ',
                                      'Cuatrocientos ', 'Quinientos ', 'Seicientos ',
                                      'Setecientos ', 'Ochocientos ', 'Novecientos ');

  Min = 1;
  Max = 4294967295;

   function RecursiveNumber(N: LongWord) : String;
  begin

    case N of

      1..9:
      begin
         Result := Digit[N];
      end;

      11..19:
      begin
         Result := Numeral[N]
      end;

      10,20..99:
      begin
         if (N Mod 10) = 0 then
            Result := Tenths[N div 10] + RecursiveNumber(N mod 10)
         else
            Result := Tenths[N div 10] + ' y '  + RecursiveNumber(N mod 10);
      end;

      100..999:
      begin
        if (N = 100) or (N >= 200) then Result := Hundreds[N div 100] + RecursiveNumber(N mod 100);
        if (N > 100) and (N < 200) then Result := 'Ciento ' + RecursiveNumber(N mod 100);
      end;

      1000..999999:
      begin
         if (Number >= 1000) and (Number < 2000) then
            Result := 'Un Mil ' + RecursiveNumber(N mod 1000)
         else
            Result := RecursiveNumber(N div 1000) + ' Mil ' + RecursiveNumber(N mod 1000);
      end;

      1000000..999999999:
      begin
         if (Number >= 1000000) and (Number < 2000000) then
            Result := 'Un Millon ' + RecursiveNumber(N mod 1000000)
         else
            Result := RecursiveNumber(N div 1000000) + ' Millones ' + RecursiveNumber(N mod 1000000);
      end;

      1000000000..4294967295:
      begin
         if (Number >= 1000000000) and (Number < 2000000000) then
            Result := 'Un Billon ' + RecursiveNumber(N mod 1000000)
         else
            Result := RecursiveNumber(N div 1000000000) + ' Billones ' + RecursiveNumber(N mod 1000000000);
      end;

    end;

  end;

begin
  if (Number >= Min) and (Number <= Max) then
     begin
        Result := RecursiveNumber(Trunc(Number));
        Result := Result +  ' Litros ';
     end
  else
     Result := '-1';
end;

procedure TForm3.Button1Click(Sender: TObject);
begin
    Form3.JvCaptionPanel1.Top:=72; form3.JvCaptionPanel1.Left:=104;
    Form3.JvCaptionPanel1.Visible:= true;  Form3.JvCaptionPanel2.Visible:= false;
end;

procedure TForm3.Button2Click(Sender: TObject);
begin
   Form3.JvCaptionPanel2.Top:=72; form3.JvCaptionPanel2.Left:=104;
   Form3.JvCaptionPanel1.Visible:= false;  Form3.JvCaptionPanel2.Visible:= true;
end;

procedure TForm3.Button3Click(Sender: TObject);
Var
 folio: string;
begin
   folio:= DataModule1.ClientDataSet1folio.Value;
     if Application.MessageBox(PChar( '¿Realmente Deseas eliminar el vale con folio:?'+'  '+ folio),PChar( 'Eliminar Vale'),
           MB_ICONQUESTION OR MB_YESNO ) = ID_YES then
       Begin
       DataModule1.ClientDataSet1.Delete;
       DataModule1.ClientDataSet1.ApplyUpdates(0);
       ShowMessage('Vale Eliminado Sactisfactoriamente');
       Form3.Edit1.Text:= intTostr(DataModule1.ClientDataSet1.RecordCount);
       End
       else
       begin

       end;
   End;

procedure TForm3.Button4Click(Sender: TObject);
begin
   Form3.Close;
end;

procedure TForm3.Button5Click(Sender: TObject);
Var
i, tamano:integer;
begin
     if (Form3.Edit2.Text = '')then
        begin
        ShowMessage('Escribe el Folio');
        end
           else
              begin
               //ShowMessage('Campos llenos correctamente');
               DataModule1.Queryvaleduplicado.Close;
               DataModule1.Queryvaleduplicado.ParamByName('folio').AsString := Form3.Edit2.Text;
               DataModule1.Queryvaleduplicado.Open;
                if DataModule1.Queryvaleduplicado.EOF then
                   begin
                  // ShowMessage('El Producto No esta Registrado!');
                            DataModule1.Queryaltavales.ParamByName('folio').AsString :=Form3.Edit2.Text;
                            DataModule1.Queryaltavales.ParamByName('nombre').AsString := Form3.Edit3.Text;
                            DataModule1.Queryaltavales.ParamByName('dependencia').AsString := Form3.ComboBox1.Text;
                            DataModule1.Queryaltavales.ParamByName('mes').AsString := Form3.ComboBox2.Text;
                            DataModule1.Queryaltavales.ParamByName('producto').AsString := Form3.ComboBox3.Text;
                            DataModule1.Queryaltavales.ParamByName('vehiculo').AsString := Form3.Edit4.Text;
                            DataModule1.Queryaltavales.ParamByName('placas').AsString := Form3.Edit5.Text;
                            DataModule1.Queryaltavales.ParamByName('cantidad').AsInteger := strToint(Form3.Edit6.Text);
                            DataModule1.Queryaltavales.ParamByName('letra').AsInteger := strToint(Form3.Edit7.Text);
                            DataModule1.Queryaltavales.ParamByName('fecha').AsDateTime := Now;

                            DataModule1.Queryaltavales.ExecSQL;
                            ShowMessage('Vale Agregado con Exito!');
                            DataModule1.Tvales.Refresh;
                            DataModule1.ClientDataSet1.Refresh;
                          Form3.Edit1.Text := IntToStr(DataModule1.ClientDataSet1.RecordCount);
                             Form3.Edit2.Text:=''; Form3.Edit3.Text:=''; Form3.Edit4.Text:=''; Form3.Edit5.Text:=''; Form3.Edit6.Text:='';
                        // imprimir el vale
                       if Application.MessageBox(PChar( '¿Deseas Imprimir el vale:?'),PChar( 'Imprimir Vale'),
                       MB_ICONQUESTION OR MB_YESNO ) = ID_YES then
                        begin
                        Form3.frxReport1.ShowReport;
                        end
                        else
                        begin

                        end;

                   end
                   else
                   begin
                   ShowMessage('El Vale ya esta Registrado!');
                   end;
               end;
end;

procedure TForm3.Button6Click(Sender: TObject);
begin
  Form3.JvCaptionPanel1.Visible:= false;
end;

procedure TForm3.Button7Click(Sender: TObject);
begin
 if (Form3.DBEdit1.Text = '')then
        begin
        ShowMessage('Escribe el Folio');
        end
        else
        begin
          DataModule1.ClientDataSet1.Edit;
          DataModule1.ClientDataSet1.ApplyUpdates(0);
          ShowMessage('Vale Modificado Sactisfactoriamente');
          Form3.JvCaptionPanel2.Visible:=false;
          end;

end;

procedure TForm3.Button8Click(Sender: TObject);
begin
  DataModule1.ClientDataSet1.Cancel;
  Form3.JvCaptionPanel2.Visible:= false;
end;

procedure TForm3.Button9Click(Sender: TObject);
begin
   Form3.frxReport1.ShowReport;
end;

procedure TForm3.Edit6Exit(Sender: TObject);
Var
number :double;
begin
    number := strTofloat(Form3.Edit6.Text);
    Form3.Edit7.Text := NumbersToLetters(Number)
end;

procedure TForm3.FormActivate(Sender: TObject);
begin
   DataModule1.Clientdataset1.Refresh;
   Form3.Edit1.Text := IntToStr(DataModule1.ClientDataSet1.RecordCount);
end;

procedure TForm3.JvDBGrid1TitleClick(Column: TColumn);
begin
DataModule1.ClientDataSet1.IndexFieldNames := Column.FieldName;
end;

end.
